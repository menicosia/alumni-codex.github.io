{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Pivotal Alumni Codex","text":"<p>A place for the links to the things we wish we'd taken with us.</p> <p>This is a collection of interesting links and docs to help us after Pivotal. It's a wiki as a workaround for searching and/or paying for Slack as a full archive.</p> <p>This is a static site, generated from a set of Markdown files in the Alumni Codex repository at GitHub.</p> <p>If you want to add anything or make any changes, you will need a GitHub account. Once you have one, you can fork, edit, and submit a pull request. See the Contributing Guide in the repository for more details.</p> <p>If this is daunting, reach out to Davis (@DWF on the Slack) and he'll help you out. </p>"},{"location":"#are-you-in-the-pivotal-alumni-slack","title":"Are you in the Pivotal Alumni Slack?","text":"<ul> <li>No? Get an invitation!</li> </ul>"},{"location":"#looking-for-swag","title":"Looking for Swag?","text":"<ul> <li>Brownwen's (SF Designer)   Once a Pivot, Always a Pivot   store</li> </ul>"},{"location":"archives/","title":"Pivotal Website Archives","text":"<p>Primary sources. A record of how Pivotal/Labs presented itself over the years.</p> <ul> <li>pivotallabs.com, 2007</li> <li>Interestings:<ul> <li>\"Interestings\" was originally \"Interesting Things\" (see the blog)</li> <li>We used to track how long standup took each day. In 2007 it looks like the norm was 15-20 minutes, which seems long by modern standards!</li> <li>\"Iteration. It doesn't mean going over the same thing again and again \u2014 it means biting off small pieces and letting one good thing build upon the next.\" (from the Pivotal Process page)</li> </ul> </li> <li>pivotallabs.com, 2010</li> <li>pivotallabs.com, 2012</li> <li>pivotallabs.com, 2013</li> <li>gopivotal.com, 2013</li> <li>gopivotal.com, slightly later 2013</li> <li>pivotallabs.com, 2014 dropped from web.archive.org</li> <li>pivotal.io, late 2014 dropped from web.archive.org</li> <li>pivotal.io, 2016 dropped from web.archive.org</li> <li>pivotal.io, 2017</li> <li>pivotal.io, 2018</li> <li>pivotal.io, 2019</li> <li>pivotal.io, 2020</li> </ul>"},{"location":"consultancies/","title":"Consultancies Like Labs","text":"<p>If your company, or a company you know, is looking for a Labs-like consultancy to help with a project, here is a list of firms that were either started by pivots, or have pivots on staff.</p>"},{"location":"consultancies/#how-to-add-to-this-list","title":"How to Add to this List","text":"<p>Please add the firm name, link to website, contact point, and any other notes you may want to add about specialties.</p>"},{"location":"consultancies/#firms","title":"Firms","text":"<ul> <li>33 Teams<ul> <li>Drew McManus </li> </ul> </li> <li>Initial Capacity<ul> <li>Mike Barinek</li> </ul> </li> <li>Mechanical Orchard<ul> <li>Dan Podsedly</li> </ul> </li> </ul>"},{"location":"agility-resources/design-and-product/","title":"Design &amp; Product Resources","text":""},{"location":"agility-resources/design-and-product/#agile-research","title":"Agile Research","text":""},{"location":"agility-resources/design-and-product/#hypothesis-tracker","title":"Hypothesis Tracker","text":"<p>The hypothesis tracker was a tool used by Labs Pivots to capture and easily synthesize data across a large number of interviews. TRUE, FALSE and N/A is entered into every cell aligning with a hypothesis and a participant so that researchers (usually designers and product managers) could see what they learned from a research project at-a-glance.</p> <p>XLSX Template | Google Sheets Template</p>"},{"location":"agility-resources/job_hunting/","title":"Job Hunting","text":"<ul> <li>A list of Companies that Pair Program<ul> <li>This is a ReadMe in a GitHub repo. Looks like it hasn't been touched in a  while, but there are open issues/PRs that list other companies </li> </ul> </li> <li>And the pivot-maintained Soft Landings for Pivots<ul> <li>A list of places pivots have created, or now work, and how to get in touch  </li> </ul> </li> </ul>"},{"location":"agility-resources/practices/","title":"Practices","text":"<ul> <li>Tanzu Practices<ul> <li>VMware officially sanctioned \"Open Sourced\" how-to guides, including templates</li> <li>Pivot Joe Moore's main job is to manage this site. Email him if you want content added.</li> </ul> </li> <li>The Anchor Playbook</li> <li>The Pivotal Glossary, by Megan Holzer<ul> <li>A set of common Pivotal language</li> </ul> </li> <li>Atlassian Team Playbooks<ul> <li>Another collection of workshops</li> <li>Some overlap with what we used a Pivotal. Many good things here, complete with templates for Atlassian Products</li> </ul> </li> <li>Agile Software Planning: What to do if Classic 2-Week Sprint Planning isn't Working</li> </ul>"},{"location":"agility-resources/project-management/","title":"Project Management - A Tree Swing Story","text":"<p>Source: https://www.zentao.pm/agile-knowledge-share/tree-swing-project-management-cartoon-97.html</p>"},{"location":"engineering/core-practice/","title":"Core Practice Discussions","text":"<p>Pivotal engineers would meet periodically over lunch to have a facilitated discussion of one of our core practices \u2014 the things we do every day. We made time for these discussions because the \"why\" of the practices doesn't often get communicated during pair programming, and we wanted to avoid developing \"cargo cults\" of people who followed the practices dogmatically without understanding their purpose.</p>"},{"location":"engineering/core-practice/#the-practices","title":"The Practices","text":"<p>The core practices we discussed included:</p> <ul> <li>TDD</li> <li>pairing</li> <li>retrospectives</li> <li>Tracker-style project management</li> <li>SRE incident review</li> <li>standup</li> <li>user research</li> <li>inceptions</li> <li>core practice discussions</li> </ul>"},{"location":"engineering/core-practice/#discussion-structure","title":"Discussion Structure","text":"<p>Discussions followed a format similar to Lean Coffee Retrospectives. The facilitator would create several columns on a whiteboard with various prompts like these:</p> <ul> <li>What is test-driven development?</li> <li>Why do we do TDD?</li> <li>When do we not do TDD?</li> <li>What are the alternatives to TDD?</li> <li>What makes a good test?</li> </ul> <p>Participants would have several minutes to write their responses to the prompts, either on post-its or directly on the whiteboard. There would then be a few more minutes for dot-voting, and the rest of the meeting would be facilitated, timeboxed discussion of the top-voted items.</p>"},{"location":"engineering/tech-videos/","title":"Tech Videos","text":"<p>Tech video lunches were a tradition at several Pivotal offices (San Francisco and Palo Alto. Others?) Here is a list of videos we watched.</p> <ul> <li>Christin Gorman - How to make your code sustainable</li> <li>Sandi Metz: SOLID Object-Oriented Design</li> <li>Michael Bernstein - Know Your Types</li> <li>Kerri Miller - 5 things I wish someone had told me about programming before I started</li> <li>(WWDC) advanced touch input</li> <li>(WWDC) Advanced NSOperations</li> <li>(WWDC) mysteries of autolayout</li> <li>Nathaniel Talbott - Maintaining Sanity</li> <li>Prometheus: Designing and Implementing a Modern Monitoring Solution in Go \u2014 Bj\u00f6rn Rabenstein</li> <li>A Practical Guide to Preventing Deadlocks and Leaks in Go \u2014 Richard Fliam</li> <li>Go kit: A Standard Library for Distributed Programming \u2014 Peter Bourgon</li> <li>The Many Faces of Struct Tags \u2014 Sam Helman and Kyle Erf</li> <li>Douglas Crockford: Monads and Gonads</li> </ul>"},{"location":"engineering/tech-videos/#longer-ones-but-interesting","title":"Longer Ones (but interesting)","text":"<ul> <li>Greg Wilson - What We Actually Know About Software Development, and Why We Believe It\u2019s True</li> <li>Robert Martin - Architecture: The Lost Years</li> <li>Boundaries in Practice - Ayaka Nonaka</li> <li>Gary Bernhardt - Boundaries</li> <li>Mike Bernstein - To know a garbage collector</li> <li>The secret assumpions of Agile</li> <li>Bret Victor - Inventing on Principle</li> <li>Bret Victor - the future of programming</li> <li>Sandi Metz - Shotgun Surgery</li> <li>Andy Matuschak - let's refactor a HUGE UIViewController</li> <li>Classical Inheritance is Obsolete - How to Think in Prototypal OO</li> <li>Katrina Owen - Here be dragons</li> <li>Sandi Metz - Nothing is something</li> <li>Ben Orenstein - Refactoring from Good to Great</li> <li>Tom Stuart - Refactoring Ruby with Monads</li> <li>Molly Dishman &amp; Martin Fowler - Agile Architecture</li> <li>Jim Weirich - Decoupling from Rails</li> <li>Jim Weirich - Y-Not</li> <li>Scott Hansleman - Virtual Machines, JavaScript and Assembler</li> <li>Smit Shah - Resilient by Design</li> <li>Thorsten Ball - Unicorn Unix Magic Tricks</li> <li>Google - High Performance HTML5</li> <li>Rich Hickey - Hammock Driven Development</li> <li>J. B. Rainsberger - Integrated Tests Are a Scam</li> <li>Anders Hejlsberg - Evolving JavaScript with TypeScript</li> <li>Rich Hickey - The Language of the System </li> <li>Needs to be 2-part</li> <li>Linear Book Scanner</li> <li>Mike Desjardins - Rails Sojourn: One Man's Journey</li> <li>Theo Schlossnagle - Career Development</li> <li>Martijn Verburg - The Diabolical Developer</li> <li>Bryan Lunduke - Linux Sucks</li> <li>Steve Yegge - GROK </li> <li>Needs to be 2-part, this is a 1hour 20min talk</li> <li>Sarah Clatterbuck - Stealth Accessibility</li> <li>Satya Kanduri, Abhimanyu Lad - Search Quality at LinkedIn</li> <li>Adam Wolff - Rebuilding Facebook Chat</li> <li>Collins &amp; Fitzpatrick - How Open Source Projects Survive Poisonous People</li> <li>Raymond Blum - How Google backs up the Internet</li> <li>Luke Wroblewski - Mobile to the Future</li> <li>Matt Aimonetti - Wicked Bad Ruby</li> <li>Brian Beckman - Don't fear the Monad</li> <li>Kevin Berridge - OOP: You're Doing It Completely Wrong (Stir Trek Edition)</li> <li>Ward Cunningham - Smallest Federated Wiki</li> <li>Martin Fowler - Introduction to NoSQL</li> <li>Richard Stallman - Copyrights (University of Calgary)</li> <li>John Wilkinson, Anthony Zacharakis - SOA Without the Tears</li> <li>Rich Hickey - Simplicity Matters</li> <li>(a talk mentioned in Serguei's lightning talk)</li> <li>John Duff - How Shopify Scales Rails</li> <li>Pete Hunt - Be Predictable, Not Correct</li> <li>Koichi Sasada - Toward Efficient Ruby 2.1</li> <li>Des Traynor - Communication and Content in Web Software</li> <li>Stuart Halloway - Simplicity Ain't Easy</li> <li>a talk mentioned in Serguei's lightning talk</li> <li>Oliver Franzke - Broken Age's Approach to Scalability (private link)</li> <li>Brendan Eich - JavaScript Taking Both the High and Low Roads</li> <li>Will Farrington: \"Boxen: How to manage an army of laptops\" - Some impressive stuff github is doing for machine management.</li> <li>Ted Nyman - Scaling Happiness</li> <li>Ann Cavoukian - Privacy By Design</li> <li>Linus Torvalds - Git</li> <li>Gary Bernhardt - Boundaries</li> <li>Steve Freeman - Test-Driven Development (that's not what we meant)</li> <li>Brian Foote - Big Ball of Mud</li> <li>Rob Fitzpatrick - Getting Customer Development Done Right</li> <li>Steven Blank - The Best Video on Customer Development</li> <li>Joshua Bloch - How to Design a Good API and Why it Matters</li> <li>Paul Gross - Uptime == Money: High Availability at Braintree</li> <li>Sam Saffron &amp; Jeff Atwood - Measuring Ruby (performance testing)</li> <li>Jared Spool - Anatomy of a Design Decision</li> <li>Alex Wright - The Web That Wasn't</li> <li>Yehuda Katz - A Tale of Two MVCs</li> <li>Shimon Schocken - From Nand to Tetris in 12 Steps</li> <li>Nick Gauthier - Outside-In Testing</li> <li>Rust: A Friendly Introduction</li> <li>(slides at http://catamorphism.org/Writing/Rust-Tutorial-tjc.pdf)</li> <li>Robert Martin - Architecture: The Lost Years</li> <li>Sean Malone - Distributed File Storage Using JavaScript Botnets</li> <li>Conrad Irwin - Pry: The Good Parts</li> <li>Zach Briggs - Nobody Will Train You But You</li> <li>Ember.js vs Angular Cage Match - Tom Dale &amp; Rob Conery battle over which framework is easier to use and more powerful:</li> <li>Gene Kim: \"Why we need devops?\" - 30000 feet view of why devops is valuable and how to do it. the market for this is 3 trillion. http://confreaks.com/videos/2353-mwrc2013-why-we-need-devops-now-a-fourteen-year-study-of-high-performing-it-organizationsBret Victor - The Future of Programming</li> <li>James Turnbull: \"Hell has frozen over: DevOps &amp; Security\" - how security people should change their work and how they talk about it.</li> <li>Sandi Metz: SOLID Object-Oriented Design</li> <li>TDD, where did it all go wrong - Ian Cooper:</li> <li>Barbara Liskov \"The Power of Abstraction\":</li> <li>Craig Kerstins: \"Postgres Demystified\" - random, but stuff you didn't know about Postgres.</li> <li>Brandon Keepers: \"Ruby at Github\" - Musings on ruby when to use, why to use. and problems (over time) in a big setup.</li> <li>Nathan Marz: \"Storm\"</li> <li>Michael Fairley: \"Immutable Ruby\" - how immutability can benefit your code.</li> <li>Greg Baugues: \"Devs and Depression\" - Type II Bipolar and ADD guy talks about depression and why we should be more attentive to our fellow devs.</li> <li>Rich Hickey - The Value of Values</li> <li>numerous videos form destroyallsoftware.com</li> <li>Peepcode Play by Play with Aaron Patterson</li> <li>Avdi Grimm - Confident Code</li> <li>Greg Moeck - Why You Don't Get Mock Objects</li> <li>Avdi Grimm - Exceptional Ruby</li> <li>Peter Cooper - Ruby 1.9 walkthrough Part 3 (in Pivotal video library on Union)</li> <li>Jim Weirich - Grand Unified Theory of Software Design</li> <li>Rich Hickey - Simplicity Matters</li> <li>Sandi Metz - Designing Tests</li> <li>Jim Weirich - Writing Solid Ruby Code</li> <li>Ryan Singer - Designing with Horses</li> <li>Aaron Patterson - Rails 4 and the future of web</li> <li>Matt Wynne - Hexagonal Rails</li> <li>Sandi Metz - Go ahead make a mess</li> <li>Eric Evans - Strategic Design</li> <li>Alex Aitken, Nick Faulkner - Chasing the Golden GOOS</li> <li>Big Nerd Ranch - Rails 4 Whirlwind Tour</li> <li>Rob Pike - Concurrency Is Not Parallelism</li> <li>Katrina Owen - Therapeutic Refactoring</li> <li>Rich Hickey - The Database as a Value</li> <li>Brendan Eich - The State of JavaScript</li> <li>Paul Irish - 10 Things I Learned from the jQuery Source</li> <li>Gary Bernhardt - Capability vs Suitability</li> <li>Guy Steele - Growing a Language</li> <li>Build a Bigger Brain: How Healthy Living Makes You Smarter - Joe Kutner - Big Ruby 2013</li> <li>Bryan Helmkamp - Refactoring big AR models</li> <li>Scaling Pinterest</li> <li>Gary Bernhardt - Ruby vs Python</li> <li>Gary Bernhardt - Boundaries</li> <li>JB Rainsberger - Integrated tests are a scam</li> <li>Sandi Metz - Magick Tricks of Testing</li> <li>Sarah Mei - Is your code too solid?</li> <li>Reginald Braithwaite - Ruby Rewrite Ruby</li> <li>Gary Bernhardt - A Whole New World</li> <li>Sumana Harihareswara - Hospitality, Jerks and What I Learned</li> <li>Sandi Metz - All the Little Things</li> <li>Martin Fowler - Workflows of Refactoring</li> <li>Jessica Kerr - Functional Principles for Object-Oriented Developers</li> <li>Stephen Carver - Spaaaaaace Shuttle</li> <li>Greg Wilson - What We Actually Know About Software Development, and Why We Believe It\u2019s True</li> </ul>"}]}